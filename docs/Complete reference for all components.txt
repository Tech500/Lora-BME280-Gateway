# üå°Ô∏è Complete LoRa Sensor System Summary

## üèóÔ∏è **Final System Architecture**

```
[Mains-Powered Gateway/Transmitter] ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                                   ‚îÇ LoRa Commands (915MHz)
    ‚îÇ WiFi/HTTP                         ‚ñº
    ‚îî‚îÄ‚ñ∫ [Docker API Container]   [Battery Sensor Node 1] ‚îÄ‚îÄ‚îê
                                                            ‚îÇ LoRa Data Responses
                                 [Battery Sensor Node 2] ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫ Back to Gateway
                                                            ‚îÇ
                                 [Battery Sensor Node N] ‚îÄ‚îÄ‚îò
```

---

## üì° **Component 1: Gateway/Transmitter (Mains Powered)**

### **Key Features:**
- **Power:** Mains powered - no battery concerns
- **WiFi:** Always connected for API uploads
- **Role:** Coordinator - sends sync + commands, receives data, uploads to API
- **Time slots:** 3-second slots (efficient for 600ms transmissions)
- **Scalability:** Handles up to 50 nodes in ~2.5 minutes

### **Operation Cycle (Every 15 minutes):**
1. **Sync Broadcast (0-1s):** `SYNC,cycleID,timestamp,nodeCount`
2. **Rapid Commands (1-2s):** Send `GET_DATA,cycleID,slotNum` to all nodes
3. **Time-Slotted Collection (2s-2.5min):** Listen in 3-second windows per node
4. **API Upload:** Immediate HTTP POST for each received sensor packet

### **Configuration:**
```cpp
// In gateway code - adjust these per node:
SensorNode knownNodes[] = {
  {0x1001, "Basement", true, 0, ...},    // Slot 0: 2-5s
  {0x1002, "Attic", true, 1, ...},       // Slot 1: 5-8s  
  {0x1003, "Garage", true, 2, ...},      // Slot 2: 8-11s
  {0x1004, "Bedroom", true, 3, ...},     // Slot 3: 11-14s
  // Add more nodes with sequential slot numbers
};
```

### **Critical Settings (Must Match Nodes):**
```cpp
#define RF_FREQUENCY 915.0
#define LORA_BANDWIDTH 125.0
#define LORA_SPREADING_FACTOR 7
#define LORA_CODINGRATE 7
#define LORA_PREAMBLE_LENGTH 512
#define LORA_SYNC_WORD RADIOLIB_SX126X_SYNC_WORD_PRIVATE
```

---

## üîã **Component 2: Sensor Nodes (Battery Powered)**

### **Key Features:**
- **Power:** 20-22¬µA sleep current (months/years battery life)
- **Wake-up:** LoRa packet triggers wake via DIO1‚ÜíGPIO16
- **Sync:** Receives sync beacon, calculates time slot
- **Response:** Transmits in assigned 3-second window
- **Sleep:** Immediately back to deep sleep after transmission

### **Power Optimizations:**
```cpp
eora_disable_wifi();      // WiFi off
eora_disable_bluetooth(); // Bluetooth off  
eora_disable_adc();      // ADC off (brief enable for battery only)
```

### **Per-Node Configuration (CRITICAL - Each node unique):**
```cpp
// Node 1:
uint16_t myNodeID = 0x1001;
uint8_t myTimeSlot = 0;

// Node 2:  
uint16_t myNodeID = 0x1002;
uint8_t myTimeSlot = 1;

// Node 3:
uint16_t myNodeID = 0x1003; 
uint8_t myTimeSlot = 2;
```

### **Battery Monitoring Options:**
1. **High-value divider:** 1MŒ©+1MŒ© = 1.85¬µA continuous
2. **Switched divider:** P-FET controlled, 0¬µA standby (RECOMMENDED)
3. **Direct measurement:** If battery <3.3V (LiFePO4)

---

## üê≥ **Component 3: Docker API Container**

### **Features:**
- **Enhanced logging:** Shows client IP, content-type, parsing details
- **Flexible parsing:** Handles JSON, form data, query params, raw text
- **Field variations:** Accepts `temp`, `temperature_f`, `humidity`, etc.
- **Test endpoint:** `/api/test` for browser testing

### **API Endpoints:**
- **Main:** `POST http://192.168.12.146:5001/api/sensor-data`
- **Test:** `GET http://192.168.12.146:5001/api/test`  
- **Home:** `GET http://192.168.12.146:5001/`

### **Expected JSON Format:**
```json
{
  "node_id": "1001",
  "node_name": "Basement", 
  "temperature_f": 72.5,
  "humidity": 65.0,
  "pressure_hpa": 1013.2,
  "battery_voltage": 3.67,
  "rssi": -67,
  "collected_by_gateway": true,
  "gateway_ip": "192.168.12.146"
}
```

---

## ‚ö° **Critical Timing Parameters**

### **Gateway Timing:**
```cpp
#define DATA_REQUEST_INTERVAL 900000  // 15 minutes between cycles
#define NODE_TIME_SLOT 3000           // 3 seconds per node  
#define RESPONSE_TIMEOUT 2500         // 2.5 second wait per node
#define MAX_NODES 50                  // Up to 50 nodes supported
```

### **Node Timing:**
- **Awake time:** ~10-30 seconds per cycle
- **Sleep time:** 14+ minutes between cycles  
- **Response window:** 3 seconds (slot calculated from sync)

---

## üîß **Setup Checklist**

### **Gateway Setup:**
1. ‚úÖ Configure WiFi credentials
2. ‚úÖ Set API URL: `http://192.168.12.146:5001/api/sensor-data`
3. ‚úÖ Define all sensor nodes in `knownNodes[]` array
4. ‚úÖ Assign unique slot numbers to each node
5. ‚úÖ Verify LoRa frequency/parameters match nodes

### **Each Sensor Node Setup:**
1. ‚úÖ Set unique `myNodeID` (0x1001, 0x1002, etc.)
2. ‚úÖ Set unique `myTimeSlot` (0, 1, 2, etc.)
3. ‚úÖ Configure battery monitoring method
4. ‚úÖ Verify LoRa parameters match gateway
5. ‚úÖ Test wake-up via GPIO16 connection

### **Docker API Setup:**
1. ‚úÖ Container running: `docker-compose up -d`
2. ‚úÖ Port accessible: `http://192.168.12.146:5001`
3. ‚úÖ Test endpoint working: `/api/test`

---

## üö® **Critical Don'ts - Easy to Miss!**

1. **DON'T use same nodeID** on multiple sensors
2. **DON'T use same timeSlot** for multiple nodes  
3. **DON'T use 20kŒ© voltage divider** (185¬µA continuous drain)
4. **DON'T forget to update both gateway AND node** when adding nodes
5. **DON'T leave ADC always enabled** (power drain)
6. **DON'T use different LoRa parameters** between gateway/nodes

---

## üìä **Expected Performance**

### **Power Consumption:**
- **Gateway:** ~100-200mA (mains powered)
- **Sensor nodes:** 20-25¬µA average (excellent battery life)

### **Timing:**
- **Collection cycle:** ~2.5 minutes for 50 nodes
- **Data transmission:** <600ms per node
- **Slot efficiency:** 20% (600ms in 3000ms window)

### **Reliability:**
- **No collisions:** Time-slot synchronization
- **Auto-recovery:** Nodes auto-disable after 5 missed responses
- **Error handling:** CRC checking, timeouts, retries

---

## üíæ **File Structure Summary**

1. **Gateway code:** Complete transmitter/coordinator (mains powered)
2. **Sensor node code:** Ultra-low power responder (battery powered)  
3. **Docker API:** Enhanced parsing and logging
4. **This summary:** Complete reference for all components

**All components are now optimized, synchronized, and power-efficient!** üåü